openapi: 3.0.0
info:
  title: My silly API
  description: description
  termsOfService: http://my.url.com
  contact:
    name: name
    url: http://my.url.com
    email: email@my.url.com
    x-foo: foo
  license:
    name: name
    url: http://my.url.com
    x-foo: foo
  version: version
  x-foo: foo
servers:
  - url: http://my.url.com
    description: description
    variables:
      var1:
        enum:
          - string
          - number
        default: string
        description: description
        x-foo: foo
      var2:
        enum:
          - string
          - number
        default: string
        description: description
        x-foo: foo
    x-foo: foo
  - url: http://my.url.com
    description: description2
    x-foo: foo
tags:
  - name: foo
    description: foo
    externalDocs:
      description: Find more info here
      url: https://example.com
externalDocs:
  description: description
  url: http://my.url.com
  x-foo: foo
x-foo: foo
paths:
  /foo:
    summary: summary
    description: description
    get:
      tags:
        - foo
        - bar
      summary: summary
      description: description
      externalDocs:
        description: description
        url: http://my.url.com
        x-foo: foo
      operationId: operationId
      parameters:
        - $ref: '#/components/parameters/param2'
        - name: name
          in: query
          description: description
          required: true
          deprecated: false
          style: form
          explode: true
          allowReserved: true
          examples:
            first:
              value: example
            second:
              value: 10
            third:
              value: 5.5
          example: example
          content:
            application/json:
              schema:
                title: title
              examples:
                x:
                  value: x
                y:
                  value: "y"
                z:
                  value: z
              example: 10
              encoding:
                fooEncoding:
                  contentType: contentType
                  headers:
                    foo:
                      description: description
                      schema:
                        type: integer
                    bar:
                      description: description
                      schema:
                        type: integer
                  style: simple
                  explode: true
                  x-foo: foo
              x-foo: foo
          x-foo: foo
      requestBody:
        description: description
        required: true
        content:
          application/json:
            schema:
              title: title
          text/plain:
            schema:
              title: title
          multipart/mixed:
            schema:
              type: object
              properties:
                id:
                  # default is text/plain
                  type: string
                  format: uuid
                address:
                  # default is application/json
                  type: object
                  properties: {}
                historyMetadata:
                  # need to declare XML format!
                  description: metadata in XML format
                  type: object
                  properties: {}
                profileImage:
                  # default is application/octet-stream, need to declare an image type only!
                  type: string
                  format: binary
            encoding:
              historyMetadata:
                # require XML Content-Type in utf-8 encoding
                contentType: application/xml; charset=utf-8
              profileImage:
                # only accept png/jpeg
                contentType: image/png, image/jpeg
                headers:
                  X-Rate-Limit-Limit:
                    description: The number of allowed requests in the current period
                    schema:
                      type: integer
      responses:
        default:
          description: description
          headers:
            xxx:
              description: description
            yyy:
              $ref: '#/components/headers/yyy'
          content:
            application/json:
              schema:
                title: title
          links:
            name:
              operationRef: '#/paths/~1foo/get'
              parameters:
                name: $request.query.name
              description: description
              x-foo: foo
            foo:
              $ref: '#/components/links/link1'
        2XX:
          description: description
        50X:
          description: description
      callbacks:
        cb1:
          $ref: '#/components/callbacks/cb1'
        cb2: {}
        xxx:
          expr1:
            summary: summary
            description: description
            get:
              summary: summary
              operationId: operationId
              responses:
                '200':
                  description: description
          expr2:
            summary: summary
            description: description
            get:
              operationId: operationid
              responses:
                '200':
                  description: description
        yyy:
          expr1:
            summary: summary
            description: description
            get:
              summary: summary
              operationId: operationId
              responses:
                '200':
                  description: description
          expr2:
            summary: summary
            description: description
            get:
              operationId: operationid
              responses:
                '200':
                  description: description
      deprecated: false
      security:
        - scheme2: [a, b, c]
          scheme1: []
        - scheme1: []
      x-foo: foo
    x-foo: foo
  /bar:
    get:
      requestBody:
        $ref: '#/components/requestBodies/reqBody1'
      responses:
        '200':
          $ref: '#/components/responses/resp1'
components:
  schemas:
    schema1:
      title: title
      multipleOf: 3.5
      maximum: 999999999.0
      exclusiveMaximum: true
      minimum: -555555555
      exclusiveMinimum: false
      maxLength: 100
      minLength: 20
      pattern: "\\d\\d\\d-xyzzy"
      maxItems: 30
      minItems: 43
      uniqueItems: true
      maxProperties: 30
      minProperties: 15
      required:
        - x
        - "y"
        - z
      enum: [ a, b, c]
      type: object
      allOf:
        - type: object
        - type: object
      oneOf:
        - type: object
        - type: object
      anyOf:
        - type: object
        - type: object
      not:
        type: object
      items:
        type: object
      properties:
        a:
          type: string
        b:
          type: string
        c:
          type: string
      additionalProperties: true
      description: description
      default: {}
      nullable: true
      readOnly: true
      writeOnly: false
      xml:
        name: name
        namespace: http://my.url.com
        prefix: prefix
        attribute: true
        wrapped: false
      externalDocs:
        description: description
        url: http://my.url.com
      example: xxx
      deprecated: true
      x-foo: foo
      x-bar: bar
    schema2:
      title: title
      additionalProperties:
        type: integer
    schema3:
      type: integer
      format: int64
    schema4:
      oneOf:
      - $ref: '#/components/schemas/schema5'
      - $ref: '#/components/schemas/schema5'
      discriminator:
        propertyName: pet_type
        mapping:
          cat: '#/components/schemas/schema5'
    schema5:
      type: object
      required:
      - pet_type
      properties:
        pet_type:
          type: string
    schema6:
      type: number
      format: float
      multipleOf: 1.1
    schema7:
      type: integer
      format: int64
      multipleOf: 1000000000000000000
  responses:
    resp1:
      description: description
    resp2:
      description: description
  parameters:
    param1:
      name: name
      in: path
    param2:
      name: name
      in: cookie
  examples:
    example2:
      value: xyzzy
  requestBodies:
    reqBody1:
      description: description
    reqBody2:
      description: description
  headers:
    header1:
      description: description
    header2:
      description: description
    yyy:
      description: description
  securitySchemes:
    scheme1:
      type: apiKey
      description: description
      name: name
      in: query
      scheme: http
      bearerFormat: bearerFormat
      openIdConnectUrl: http://my.url.com
      x-foo: foo
    scheme2:
      type: oauth2
      description: description
      name: name
      in: query
      scheme: http
      bearerFormat: bearerFormat
      flows:
        implicit:
          authorizationUrl: http://my.url.com
          refreshUrl: http://my.url.com
          scopes:
            xxx: xxx
            yyy: yyy
          x-foo: foo
        password:
          tokenUrl: http://my.url.com
          scopes:
            xxx: xxx
            yyy: yyy
          x-foo: foo
        clientCredentials:
          tokenUrl: http://my.url.com
          refreshUrl: http://my.url.com
          scopes:
            xxx: xxx
            yyy: yyy
          x-foo: foo
          x-bar: bar
        authorizationCode:
          authorizationUrl: http://my.url.com
          tokenUrl: http://my.url.com
          refreshUrl: http://my.url.com
          scopes:
            xxx: xxx
            yyy: yyy
          x-foo: foo
          x-bar: bar
        x-foo: foo
      openIdConnectUrl: http://my.url.com
      x-foo: foo
  links:
    link1:
      operationRef: '#/paths/~1foo/get'
    link2:
      operationRef: '#/paths/~1foo/get'
  callbacks:
    cb1:
      expr1:
        summary: summary
      expr2:
        summary: summary
      x-foo: foo
      x-bar: bar
  x-foo: foo
