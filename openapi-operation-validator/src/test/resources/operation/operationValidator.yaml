openapi: 3.0.1
info:
  description: a description
  version: 1.0.0
  title: API
paths:
  /fixed/{intPathParam}/fixed/{stringPathParam}/fixed/:
    parameters:
      # Not required at this stage but overridden by operation
      - name: stringPathParam
        in: path
        schema:
          type: string
      - name: pathStringHeaderParam
        in: header
        required: true
        schema:
          type: string
    get:
      operationId: paramCheck
      parameters:
        - name: intPathParam
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: stringPathParam
          in: path
          required: true
          schema:
            type: string
        - name: boolQueryParam
          in: query
          required: true
          schema:
            type: boolean
        - name: intQueryParam
          in: query
          schema:
            type: integer
            format: int32
        - name: floatHeaderParam
          in: header
          required: true
          schema:
            type: number
            format: float
        - name: dtCookieParam
          in: cookie
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: a description
          headers:
            X-Rate-Limit:
              description: The number of allowed requests in the current period
              schema:
                nullable: true
                type: integer
          content:
            'application/json': {}
  /post:
    post:
      operationId: rqBodyCheck
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              properties:
                param:
                  type: string
      responses:
        '200':
          description: a description
          content:
            'application/json': {}
        'default':
          description: a description
          content:
            'application/json': {}
  /complexMediaType:
    get:
      operationId: getComplexMediaType
      responses:
        '200':
          description: a description
          content:
            'text/plain; charset=iso-8859-1': {}
    post:
      operationId: postComplexMediaType
      requestBody:
        required: true
        content:
          'text/plain; charset=iso-8859-1': {}
      responses:
        '200':
          description: a description
          content:
            'application/json': {}
  /merge_parameters:
    parameters:
      - name: pathStringHeaderParam
        in: header
        required: true
        schema:
          type: string
      - $ref: '#/components/parameters/refIntHeaderParameter'
    get:
      operationId: merge_parameters
      responses:
        '200':
          description: a description
          content:
            'application/json': {}
  /wrong_definition_for_body_response:
    post:
      operationId: wrong_definition_for_body_response
      requestBody:
        required: true
  /wrong_definition_for_body_response2:
    post:
      operationId: wrong_definition_for_body_response2
      requestBody:
        required: true
      responses:
  /discriminator:
    post:
      operationId: discriminator
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Cat'
                - $ref: '#/components/schemas/Dog'
              discriminator:
                propertyName: pet_type
      responses:
        '200':
          description: Updated
components:
  parameters:
    refIntHeaderParameter:
      in: header
      name: refIntHeaderParameter
      required: true
      schema:
        type: integer
  schemas:
    Pet:
      type: object
      required:
        - pet_type
      properties:
        pet_type:
          type: string
      discriminator:
        propertyName: pet_type
    Dog:     # "Dog" is a value for the pet_type property (the discriminator value)
      allOf: # Combines the main `Pet` schema with `Dog`-specific properties
        - $ref: '#/components/schemas/Pet'
        - type: object
          # all other properties specific to a `Dog`
          properties:
            bark:
              type: boolean
            breed:
              type: string
              enum: [Dingo, Husky, Retriever, Shepherd]
    Cat:     # "Cat" is a value for the pet_type property (the discriminator value)
      allOf: # Combines the main `Pet` schema with `Cat`-specific properties
        - $ref: '#/components/schemas/Pet'
        - type: object
          # all other properties specific to a `Cat`
          properties:
            hunts:
              type: boolean
            age:
              type: integer

